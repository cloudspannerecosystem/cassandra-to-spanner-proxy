name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  golangLint:
    name: Lint Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint --version

      - name: Run Golangci Lint
        id: lint
        run: |
          golangci-lint run --timeout 5m --issues-exit-code 0 --out-format=tab > lint_results_table.md
          if [ -s lint_results_table.md ]; then
              echo "Issues found"
              echo "lint_flag=true" >> "$GITHUB_OUTPUT"
          else
              echo "No issues found"
          fi

  build:
    name: build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: |
            go test ./{/otel,/third_party/datastax/proxycore,/responsehandler,/spanner,/tableConfig,/tableConfig,/translator,/utilities,/third_party/datastax/proxy} -coverprofile=cover.out | tee -a ${GITHUB_WORKSPACE}/unit_test_result.txt ; (exit ${PIPESTATUS[0]})
            go tool cover -func cover.out | grep total: >> ${GITHUB_WORKSPACE}/unit_test_result.txt

    - name: Comment unit test result on PR
      uses: actions/github-script@v7
      if: ${{ success() || failure() }}
      continue-on-error: true
      with:
        script: |
          const fs = require('fs');
          const filePath = `${process.env.GITHUB_WORKSPACE}/unit_test_result.txt`;
          const unit_test_result = fs.readFileSync(filePath, 'utf8');
    
          // Comment on the pull request using the github context
          github.rest.issues.createComment({
          issue_number: context.payload.pull_request.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: `### Unit test result\n\n${unit_test_result}\n`,
          })
            .then(() => {
            console.log('Commented on the pull request successfully.');
            // process.exit(1); // Exit the script with a failure status to fail the GitHub workflow
          })
            .catch((error) => {
            console.error('Error commenting on the pull request:', error);
            // process.exit(1);
          });
